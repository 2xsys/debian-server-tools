#!/bin/bash
#
# List your server's resources.
#
# VERSION       :1.0.5
# DATE          :2016-05-18
# AUTHOR        :Viktor Sz√©pe <viktor@szepe.net>
# LICENSE       :The MIT License (MIT)
# URL           :https://github.com/szepeviktor/debian-server-tools
# BASH-VERSION  :4.2+
# DEPENDS       :apt-get install usbutils host
# LOCATION      :/usr/local/sbin/server-integrity.sh

# Checks
# - CPU
# - memory
# - disks
# - swap
# - clock source
# - entropy
# - virtual console
# - gateway
# - IP address
# - nameserver
# - nearest hop
# - reverse record
# - MX record

set -e

Disk_partitions() {
    local VDISK

    # OpenVZ: no disk devices, empty string (but no CloudLinux)
    # OpenVZ states in /proc/self/status:
    #     envID == 0 -> openvzhn
    #     envID present but > 0 -> openvzve
    if [ -f /proc/vz/vzquota ] && ! [ -f /proc/lve/list ]; then
        echo ""
        return 0
    fi

    # Physical /dev/[sh]d? (only hd?)
    # VMware /dev/sd?
    # XEN /dev/xvd?
    # KVM dev/vd?
    for VDISK in hd sd xvd vd; do
        if [ -n "$(find /dev/ -type b -name "${VDISK}?")" ]; then
            find /dev/ -type b -name "${VDISK}?" | paste -s -d ":"
            return 0
        fi
    done

    return 1
}

while getopts ":c:h:r:" OPT; do
    case "$OPT" in
        c)
            CHECK="$OPTARG"
            ;;
        h)
            # Nearest host for HOP1/2
            NEAREST="$OPTARG"
            ;;
        r)
            # Expected result
            EXPECTED="$OPTARG"
            ;;
        *)
            # Incorrect usage
            exit 6;
            ;;
    esac
done

shift $((OPTIND - 1))

# Stray option
[ -z "$*" ] || exit 7

case "$CHECK" in
    CPU)
        RESULT="$(grep -c "^processor\b" /proc/cpuinfo)"
        ;;
    RAM)
        RAM_KB="$(sed -n -e 's;^MemTotal:\s\+\(\S\+\).*$;\1;p' /proc/meminfo)"
        RESULT="$((RAM_KB / 1024))"
        ;;
    PCI)
        RESULT="$(lspci -n | md5sum | cut -d " " -f 1)"
        ;;
    USB)
        [ -d /sys/bus/usb ] || exit 10
        RESULT="$(lsusb | cut -d " " -f 1-6 | md5sum | cut -d " " -f 1)"
        ;;
    DISK)
        RESULT="$(Disk_partitions)" || exit 10
        ;;
    SWAP)
        RESULT="$(sed -e '1d;s;^\(\S\+\s\+\)\{2\}\(\S\+\).*$;\2;' /proc/swaps | paste -s -d ":")"
        ;;
    CLOCKSOURCE)
        RESULT="$(< /sys/devices/system/clocksource/clocksource0/current_clocksource)"
        ;;
    ENTROPY)
        declare -i ENTROPY="$(< /proc/sys/kernel/random/entropy_avail)"
        if [ "$ENTROPY" -ge 1000 ]; then
            RESULT="min1000"
        else
            RESULT="insufficient"
        fi
        ;;
    VCONSOLE)
        [ -c /dev/hvc0 ] || exit 10
        RESULT="/dev/hvc0"
        ;;
    GATEWAY)
        # @FIXME "default dev venet0  scope link" if grep "^default dev [[:alnum:]]\+ "; then grep \1
        RESULT="$(ip route | grep "^default via " | cut -d " " -f 3)"
        ;;
    IP1)
        RESULT="$(ip addr show | sed -n -e 's;^\s*inet \([0-9\.]\+\)\b.*$;\1;p' | grep -v -x -m 1 "127\.[0-9]\+\.[0-9]\+\.[0-9]\+")"
        ;;
    DNS1)
        RESULT="$(sed -n -e '0,/^nameserver \([0-9.]\+\)\s*$/s;;\1;p' /etc/resolv.conf)"
        ;;
    HOP1)
        [ -z "$NEAREST" ] && exit 8
        RESULT="$(traceroute -n -m 1 "$NEAREST" | tail -n 1 | cut -d " " -f 4)"
        ;;
    HOP2)
        [ -z "$NEAREST" ] && exit 8
        RESULT="$(traceroute -n -m 2 "$NEAREST" | sed -n -e '$s;^ 2  \([0-9.]\+\) .*$;\1;p')"
        ;;
    PTR1)
        IP="$("$0" -c IP1)"
        RESULT="$(host -t PTR "$IP" | sed -n -e '0,/^[0-9.]\+\.in-addr\.arpa domain name pointer \(.\+\)$/s//\1/p')"
        ;;
    MX1)
        MX1="$(host -t MX "$(hostname -f)")" #"
        [ "$MX1" == "${MX1/ mail is handled by /}" ] && exit 10
        RESULT="$(echo "$MX1" | sed -n -e '0,/^.* mail is handled by [0-9]\+ \(\S\+\).*$/s;;\1;p')"
        ;;
    RES)
        # Responding resolver count
        declare -i RESULT
        RESOLVERS="$(sed -n -e 's;^nameserver\s\+\(\S\+\)\s*$;\1;p' /etc/resolv.conf)"
        while read -r RESOLVER; do
            if host -t PTR 8.8.8.8 "$RESOLVER" &> /dev/null; then
                RESULT+="1"
            fi
        done <<< "$RESOLVERS"
        ;;
    *)
        # Missing check
        exit 9;
        ;;
esac

echo "$RESULT"

# We need to check the result
if [ -n "${EXPECTED+empty}" ]; then
    # Expected value is set and empty
    if [ "$EXPECTED" == "empty" ]; then
        EXPECTED=""
    fi
    [ "$EXPECTED" == "$RESULT" ]
fi

# Test: sed -ne 's;^\s*\([A-Z0-9]\+\)).*;\1;p' ./01-system_script|xargs -I% bash -- ./01-system_script -c % -h 8.8.8.8
# Test: sed -ne 's;^\s*\([A-Z0-9]\+\)).*;\1;p' server-integrity.sh|xargs -I% server-integrity.sh -c % -h 8.8.8.8
